!function(){"use strict";var e=["ui.router","ngAnimate","ngCookies","ngTouch","ngSanitize","ngMessages","ngAria","ngMaterial","toastr"];angular.module("memorygame",e)}(),function(){"use strict";function e(e,t){function n(n,i,a){var r=angular.element(i[0].firstChild),s=n.$watch("tile.isCorrect",function(n){n&&(e.addClass(r,"match").then(function(){t(function(){e.removeClass(r,"match")},300)}),s())})}function i(e,t){function n(){!i.isSelected&&t.getRegisteredSelectedTilesCount()<2&&(i.isSelected=!0,t.registerSelectedTile(i))}var i=e.tile,a=this;a.onClick=n}return i.$inject=["$scope","GameService"],{restrict:"E",scope:{tile:"="},controller:i,controllerAs:"TileCtrl",templateUrl:"app/components/tile/tile.html",link:n}}angular.module("memorygame").directive("mgTile",e),e.$inject=["$animate","$timeout"]}(),function(){"use strict";function e(){function e(e,t,n,i){function a(){r()}function r(){e.$watch("level",s),e.$on("Game:Reset",l.bind({},e.level))}function s(t){t&&l(e.level)}function l(e){var a=2*e+2,r=a/2,s=[],l=[];o=a*r;for(var m=0;o/2>m;m++)s.push(angular.copy(c[m]),angular.copy(c[m]));s=_.shuffle(s),m=0;for(var g=0;r>g;g++){l[g]=[];for(var d=0;a>d;d++)l[g].push(s[m]),m++}u.lines=l,i.debug("Genereted Tile Lines: ",l),t.setRenderedTilesCount(o),i.debug("Total Tiles Genereted: ",o),c=_.shuffle(n)}var o,c=_.shuffle(n),u=this;return u.lines=[],a()}return e.$inject=["$scope","GameService","GAME_CARDS","$log"],{restrict:"E",scope:{level:"=mgLevel"},controller:e,controllerAs:"GameBoardCtrl",templateUrl:"app/components/game-board/game-board.html"}}angular.module("memorygame").directive("mgGameBoard",e)}(),function(){"use strict";function e(e,t,n){function i(e){p.currentLevelParams.renderedTilesCount=e}function a(e){p.currentLevelParams.selectedTiles.push(e)}function r(){return p.currentLevelParams.selectedTiles.length}function s(){var e=p.currentLevelParams.selectedTiles[0].id===p.currentLevelParams.selectedTiles[1].id;return e?t.resolve():t.reject()}function l(){return _.each(p.currentLevelParams.selectedTiles,function(e){e.isCorrect=!0,e.isSelected=!1}),p.currentLevelParams.totalTilesMatchesCount=p.currentLevelParams.totalTilesMatchesCount+2,e.debug("Total Tiles Matches: ",p.currentLevelParams.totalTilesMatchesCount),p.levelFinished=p.currentLevelParams.totalTilesMatchesCount===p.currentLevelParams.renderedTilesCount,p.levelFinished}function o(){_.each(p.currentLevelParams.selectedTiles,function(e){e.isSelected=!1})}function c(){p.currentLevelParams.selectedTiles=[],e.debug("selected tiles cleared:",p.currentLevelParams.selectedTiles)}function u(){var t=p.currentLevel;p=angular.copy(h),1===t&&n.$broadcast("Game:Reset"),e.debug("the game was reset: ",p)}function m(){p.currentLevel===C?(p.gameFinished=!0,e.debug("game is finished")):(p.levelFinished=!1,p.currentLevelParams=angular.copy(h.currentLevelParams),p.currentLevel++,e.debug("Geting into next level: ",p.currentLevel))}function g(){return p.currentLevel}function d(){return p.totalMoves++,e.debug("Added move:",p.totalMoves),t.resolve()}function v(){return p.totalMoves}function f(){return p.gameFinished}var p={currentLevelParams:{totalTilesMatchesCount:0,renderedTilesCount:0,selectedTiles:[]},currentLevel:1,levelFinished:!1,gameFinished:!1,totalMoves:0},h=angular.copy(p),C=3;return{setRenderedTilesCount:i,registerSelectedTile:a,getRegisteredSelectedTilesCount:r,onSelectedTilesMatch:s,clearSelectedTiles:c,setSelectedTilesAsCorrect:l,onSelectedTilesMismatch:o,getCurrentLevel:g,nextLevel:m,addMove:d,getTotalMoves:v,gameFinished:f,resetGame:u}}angular.module("memorygame").factory("GameService",e),e.$inject=["$log","$q","$rootScope"]}(),function(){"use strict";function e(e){e.state("game",{url:"/game",templateUrl:"app/game/game.html",controller:"GameController",controllerAs:"GameCtrl"})}angular.module("memorygame").config(e),e.$inject=["$stateProvider"]}(),function(){"use strict";function e(e,t,n,i){function a(){r()}function r(){e.$watch(t.getRegisteredSelectedTilesCount,s)}function s(e){2===e&&t.addMove().then(t.onSelectedTilesMatch).then(function(){return i.debug("Selected Tiles is Match"),n(t.setSelectedTilesAsCorrect,300)}).then(function(e){return e?(i.debug("Level is finished"),n(t.nextLevel,800)):void 0})["catch"](function(){return i.debug("Selected Tiles Mismatch"),n(t.onSelectedTilesMismatch,500)})["finally"](function(){t.clearSelectedTiles()})}var l=this;return l.getCurrentLevel=t.getCurrentLevel,l.getTotalMoves=t.getTotalMoves,l.resetGame=t.resetGame,l.gameFinished=t.gameFinished,a()}angular.module("memorygame").controller("GameController",e),e.$inject=["$scope","GameService","$timeout","$log"]}(),function(){"use strict";function e(e){e.debug("runBlock end")}angular.module("memorygame").run(e),e.$inject=["$log"]}(),function(){"use strict";function e(e,t){t.otherwise("/game")}angular.module("memorygame").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";angular.module("memorygame").constant("GAME_CARDS",[{id:1,img:"./assets/images/angular.png"},{id:2,img:"./assets/images/angular-material.png"},{id:3,img:"./assets/images/browsersync.png"},{id:4,img:"./assets/images/gulp.png"},{id:5,img:"./assets/images/node-sass.png"},{id:6,img:"./assets/images/karma.png"},{id:7,img:"./assets/images/jasmine.png"},{id:8,img:"./assets/images/protractor.png"},{id:9,img:"./assets/images/babel.png"},{id:10,img:"./assets/images/angular-foundation.png"},{id:11,img:"./assets/images/angular-strap.png"},{id:12,img:"./assets/images/less.png"},{id:13,img:"./assets/images/zepto.png"},{id:14,img:"./assets/images/typescript.png"},{id:15,img:"./assets/images/traceur.png"},{id:16,img:"./assets/images/jade.png"}])}(),function(){"use strict";function e(e,t){e.debugEnabled(!0),t.allowHtml=!0,t.timeOut=3e3,t.positionClass="toast-top-right",t.preventDuplicates=!0,t.progressBar=!0}angular.module("memorygame").config(e),e.$inject=["$logProvider","toastrConfig"]}(),angular.module("web").run(["$templateCache",function(e){e.put("app/game/game.html",'<div class="game-container game-finished"><div class="game-info-bar" layout="row" layout-align="space-between center"><div><span>Current Level: <strong>{{GameCtrl.getCurrentLevel()}}</strong></span> <span>Total Moves: <strong>{{GameCtrl.getTotalMoves()}}</strong></span></div><div><md-button ng-click="GameCtrl.resetGame()">Reset Game</md-button></div></div><mg-game-board mg-level="GameCtrl.getCurrentLevel()"></mg-game-board><div class="game-finished" ng-show="GameCtrl.gameFinished()"><h1>CONGRATULATIONS</h1><md-button ng-click="GameCtrl.resetGame()">NEW GAME</md-button></div><div class="fireworks" ng-if="GameCtrl.gameFinished()"></div></div>'),e.put("app/components/game-board/game-board.html",'<div class="game-board-container"><div class="game-board-line" ng-repeat="line in GameBoardCtrl.lines"><mg-tile ng-repeat="tile in line track by $index" tile="tile"></mg-tile></div></div>'),e.put("app/components/tile/tile.html",'<div class="mg-tile-container" ng-click="TileCtrl.onClick()" ng-class="{flipped: (tile.isSelected || tile.isCorrect)}"><div class="tile-back"></div><div class="tile-front" layout="column" layout-align="center center"><div class="tile-front-image" style="background-image: url(\'{{tile.img}}\')"></div></div></div>')}]);
//# sourceMappingURL=../maps/scripts/app-af0b8be0b3.js.map
