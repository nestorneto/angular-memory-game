{"version":3,"sources":["scripts/app-a7cefbb27d.js"],"names":["dependencies","angular","module","GameBoardDirective","GameBoardController","$scope","GameService","GAME_CARDS","$log","init","setWatchers","$watch","onLevelChange","$on","generateTileLinesForCurrentLevel","bind","level","currentLevel","gridX","gridY","tiles","lines","_totalTiles","i","push","copy","_gameCards","_","shuffle","y","x","self","debug","setRenderedTilesCount","this","$inject","restrict","scope","controller","controllerAs","templateUrl","directive","tileDirective","$animate","$timeout","postLink","element","attributes","container","firstChild","unbindWatcher","isCorrect","addClass","then","removeClass","TileController","onClick","_tile","isSelected","getRegisteredSelectedTilesCount","registerSelectedTile","tile","link","$q","$rootScope","number","_gameParams","currentLevelParams","renderedTilesCount","selectedTiles","length","onSelectedTilesMatch","match","id","resolve","reject","setSelectedTilesAsCorrect","each","totalTilesMatchesCount","levelFinished","onSelectedTilesMismatch","clearSelectedTiles","resetGame","resetOnLevel","_defaultGameParams","$broadcast","nextLevel","_maxLevel","gameFinished","getCurrentLevel","addMove","totalMoves","getTotalMoves","factory","routerConfig","$stateProvider","state","url","config","GameController","onSelectedTilesCountChange","count","runBlock","run","$urlRouterProvider","otherwise","constant","img","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache","put"],"mappings":"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","file":"scripts/app-a7cefbb27d.js","sourcesContent":["(function() {\n  'use strict';\n\n  var dependencies = [\n    'ui.router',\n    'ngAnimate',\n    'ngCookies',\n    'ngTouch',\n    'ngSanitize',\n    'ngMessages',\n    'ngAria',\n    'ngMaterial',\n    'toastr'\n  ];\n\n  angular.module('memorygame', dependencies);\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .directive('mgGameBoard', GameBoardDirective);\n\n  /** @ngInject **/\n  function GameBoardDirective() {\n    return {\n      restrict: 'E',\n      scope: {\n        level: '=mgLevel'\n      },\n      controller: GameBoardController,\n      controllerAs: 'GameBoardCtrl',\n      templateUrl: 'app/components/game-board/game-board.html'\n    };\n\n    function GameBoardController($scope, GameService, GAME_CARDS, $log) {\n\n      // private variables\n      var\n        _gameCards = _.shuffle(GAME_CARDS),\n        _totalTiles,\n        self = this;\n\n      //- public variables\n      self.lines = [];\n\n      //- private methods\n\n      return init();\n\n      function init() {\n\n        setWatchers();\n      }\n\n      function setWatchers() {\n        $scope.$watch('level', onLevelChange);\n\n        // when the game is reset at current level 1 this event is emitted.\n        $scope.$on('Game:Reset', generateTileLinesForCurrentLevel.bind({}, $scope.level));\n      }\n\n      /**\n       * When current Level change generate new tiles based on current level\n       * @param currentLevel\n       */\n      function onLevelChange(currentLevel) {\n        if (currentLevel) {\n          generateTileLinesForCurrentLevel($scope.level);\n        }\n      }\n\n      /**\n       * 1. Calculate the grid based on current level\n       * 2. Generate the pair of tiles based on calc\n       * 3. shuffle them\n       * 4. Create a lines of tiles based on Grid Y\n       * 5. Set this Line with tiles into a public variable\n       * 6. Set into service the total of rendered tiles\n       * 7. shuffle the game cards for the next reset\n       *\n       * @param level\n       */\n      function generateTileLinesForCurrentLevel(level) {\n        var\n          gridX = level * 2 + 2,\n          gridY = gridX / 2,\n          tiles = [],\n          lines = [];\n\n        _totalTiles = gridX * gridY;\n\n        for (var i = 0; i < _totalTiles / 2; i++) {\n          tiles.push(angular.copy(_gameCards[i]), angular.copy(_gameCards[i]));\n        }\n\n        tiles = _.shuffle(tiles);\n\n        i = 0;\n\n        for (var y = 0; y < gridY; y++) {\n          lines[y] = [];\n          for (var x = 0; x < gridX; x++) {\n            lines[y].push(tiles[i]);\n            i++;\n          }\n        }\n\n        self.lines = lines;\n\n        $log.debug('Genereted Tile Lines: ', lines);\n\n        GameService.setRenderedTilesCount(_totalTiles);\n\n        $log.debug('Total Tiles Genereted: ', _totalTiles);\n\n        // shuffle _gameCards for the next reset.\n        _gameCards = _.shuffle(GAME_CARDS);\n      }\n\n\n    }\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .directive('mgTile', tileDirective);\n\n  /** @ngInject */\n  function tileDirective($animate, $timeout) {\n    return {\n      restrict: 'E',\n      scope: {\n        tile: '='\n      },\n      controller: TileController,\n      controllerAs: 'TileCtrl',\n      templateUrl: 'app/components/tile/tile.html',\n      link: postLink\n    };\n\n    function postLink(scope, element, attributes) {\n      var container = angular.element(element[0].firstChild);\n\n      var unbindWatcher = scope.$watch('tile.isCorrect', function(isCorrect) {\n        if (isCorrect) {\n          $animate.addClass(container, 'match').then(function() {\n            $timeout(function() { $animate.removeClass(container, 'match'); }, 300);\n          });\n          unbindWatcher();\n        }\n      });\n    }\n\n    /** @ngInject */\n    function TileController($scope, GameService) {\n      var\n        _tile = $scope.tile,\n        self = this;\n\n      // public methods\n      self.onClick = onClick;\n\n      // private methods\n\n      function onClick() {\n        if (!_tile.isSelected && GameService.getRegisteredSelectedTilesCount() < 2) {\n          _tile.isSelected = true;\n          GameService.registerSelectedTile(_tile);\n        }\n      }\n\n    }\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .factory('GameService', GameService);\n\n  /** @ngInject */\n  function GameService($log, $q, $rootScope) {\n\n    // private variables\n    var\n      _gameParams = {\n        currentLevelParams: {\n          totalTilesMatchesCount: 0,\n          renderedTilesCount: 0,\n          selectedTiles: []\n        },\n        currentLevel: 1,\n        levelFinished: false,\n        gameFinished: false,\n        totalMoves: 0\n      },\n\n      // define default game params\n      _defaultGameParams = angular.copy(_gameParams),\n      _maxLevel = 3;\n\n    // public methods\n    return {\n      setRenderedTilesCount: setRenderedTilesCount,\n\n      registerSelectedTile: registerSelectedTile,\n      getRegisteredSelectedTilesCount: getRegisteredSelectedTilesCount,\n\n      onSelectedTilesMatch: onSelectedTilesMatch,\n      clearSelectedTiles: clearSelectedTiles,\n\n      setSelectedTilesAsCorrect: setSelectedTilesAsCorrect,\n      onSelectedTilesMismatch: onSelectedTilesMismatch,\n\n      getCurrentLevel: getCurrentLevel,\n      nextLevel: nextLevel,\n\n      addMove: addMove,\n      getTotalMoves: getTotalMoves,\n\n      gameFinished: gameFinished,\n      resetGame: resetGame\n    };\n\n    // private methods\n\n    /**\n     * Set the number of rendered tiles (called into game-board directive)\n     * @param number\n     */\n    function setRenderedTilesCount(number) {\n      _gameParams.currentLevelParams.renderedTilesCount = number;\n    }\n\n    /**\n     * Add a tile into selectedTiles\n     * @param tile\n     */\n    function registerSelectedTile(tile) {\n      _gameParams.currentLevelParams.selectedTiles.push(tile);\n    }\n\n    /**\n     * Returns the number of selected tiles;\n     */\n    function getRegisteredSelectedTilesCount() {\n      return _gameParams.currentLevelParams.selectedTiles.length;\n    }\n\n    /**\n     * Verify if selected tiles match.\n     *\n     * 1. Returns a Resolved promise if they match.\n     * 2. Returns a Rejected promise if they mistmatch\n     */\n    function onSelectedTilesMatch() {\n      var match = _gameParams.currentLevelParams.selectedTiles[0].id === _gameParams.currentLevelParams.selectedTiles[1].id;\n      return (match) ? $q.resolve() : $q.reject();\n    }\n\n    /**\n     * 1. Set all selected tiles to isCorrect: true and isSelected: false\n     * 2. Refresh the Total Tiles Matches count\n     * 3. Set LevelFinished for true if Total Tiles Matches are equal with Rendered Tiles Count\n     * 4. Returns levelFinished status\n     * @returns {boolean}\n     */\n    function setSelectedTilesAsCorrect() {\n      _.each(_gameParams.currentLevelParams.selectedTiles, function (tile) {\n        tile.isCorrect = true;\n        tile.isSelected = false;\n      });\n\n      _gameParams.currentLevelParams.totalTilesMatchesCount = _gameParams.currentLevelParams.totalTilesMatchesCount + 2;\n\n      $log.debug('Total Tiles Matches: ', _gameParams.currentLevelParams.totalTilesMatchesCount);\n\n      _gameParams.levelFinished = (_gameParams.currentLevelParams.totalTilesMatchesCount === _gameParams.currentLevelParams.renderedTilesCount);\n\n      return _gameParams.levelFinished;\n    }\n\n    /**\n     * Set all selected tiles isSelected: false\n     */\n    function onSelectedTilesMismatch() {\n      _.each(_gameParams.currentLevelParams.selectedTiles, function (tile) {\n        tile.isSelected = false;\n      });\n    }\n\n    /**\n     * Clear selected tiles array\n     */\n    function clearSelectedTiles() {\n      _gameParams.currentLevelParams.selectedTiles = [];\n      $log.debug('selected tiles cleared:', _gameParams.currentLevelParams.selectedTiles);\n    }\n\n    /**\n     * Reset the gameParams to default value\n     *\n     * PS. if current level is 1 it should emit a event for board directive know the game was reset\n     */\n    function resetGame() {\n\n      var resetOnLevel = _gameParams.currentLevel;\n\n      _gameParams = angular.copy(_defaultGameParams);\n\n      if (resetOnLevel === 1) {\n        $rootScope.$broadcast('Game:Reset');\n      }\n\n      $log.debug('the game was reset: ', _gameParams);\n    }\n\n    /**\n     * 1. Check if current level is the last level and set gameFinished status for true if it is.\n     * 2. Set the currentLevelParams to defaultValues and add a level to currentLevel\n     */\n    function nextLevel() {\n      if (_gameParams.currentLevel === _maxLevel) {\n        _gameParams.gameFinished = true;\n        $log.debug('game is finished');\n      } else {\n        _gameParams.levelFinished = false;\n        _gameParams.currentLevelParams = angular.copy(_defaultGameParams.currentLevelParams);\n        _gameParams.currentLevel++;\n        $log.debug('Geting into next level: ', _gameParams.currentLevel);\n      }\n    }\n\n    /**\n     * get current level\n     * @returns {number}\n     */\n    function getCurrentLevel() {\n      return _gameParams.currentLevel;\n    }\n\n    /**\n     * 1. add a move to counter\n     * 2. returns a resolved promise\n     */\n    function addMove() {\n      _gameParams.totalMoves++;\n      $log.debug('Added move:', _gameParams.totalMoves);\n\n      return $q.resolve();\n    }\n\n    /**\n     * get total moves\n     * @returns {number}\n     */\n    function getTotalMoves() {\n      return _gameParams.totalMoves;\n    }\n\n    /**\n     * Get gameFinished status\n     * @returns {boolean}\n     */\n    function gameFinished() {\n      return _gameParams.gameFinished;\n    }\n\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider) {\n    $stateProvider\n      .state('game', {\n        url: '/game',\n        templateUrl: 'app/game/game.html',\n        controller: 'GameController',\n        controllerAs: 'GameCtrl'\n      });\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .controller('GameController', GameController);\n\n  /** @ngInject */\n  function GameController($scope, GameService, $timeout, $log) {\n\n    //- private variables\n    var self = this;\n\n    //- public methods\n    self.getCurrentLevel = GameService.getCurrentLevel;\n    self.getTotalMoves = GameService.getTotalMoves;\n    self.resetGame = GameService.resetGame;\n    self.gameFinished = GameService.gameFinished;\n\n    // private methods\n\n    return init();\n\n    /**\n     * when controller is rendered performs\n     */\n    function init() {\n        setWatchers();\n    }\n\n    /**\n     * set any watchers used by this controller\n     */\n    function setWatchers() {\n      $scope.$watch(GameService.getRegisteredSelectedTilesCount, onSelectedTilesCountChange);\n    }\n\n    /**\n     * When two tiles are selected, runs a stream of actions.\n     *\n     * 1. add a move to counter\n     * 2. check if both tiles match\n     * 3. if mismatch just remove unselected them\n     * 4. when they match, mark them as correct (it returns a boolean with levelFinished status)\n     * 5. when levelFinished is true, try to go into next level (it returns a boolean with gameFinished status)\n     * 6. when gameFinished is true, just log...\n     *\n     * PS. It Always clear Selected Tiles in the end of flow.\n     * @param count\n     */\n    function onSelectedTilesCountChange(count) {\n      if (count === 2) {\n        GameService\n          .addMove()\n          .then(GameService.onSelectedTilesMatch)\n          .then(function() {\n            $log.debug('Selected Tiles is Match');\n            return $timeout(GameService.setSelectedTilesAsCorrect, 300);\n          })\n          .then(function(levelFinished) {\n            if (levelFinished) {\n              $log.debug('Level is finished');\n              return $timeout(GameService.nextLevel, 800);\n            }\n          })\n          .catch(function() {\n            $log.debug('Selected Tiles Mismatch');\n            return $timeout(GameService.onSelectedTilesMismatch, 500);\n          })\n          .finally(function() {\n            GameService.clearSelectedTiles();\n          });\n      }\n    }\n\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider.otherwise('/game');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function () {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .constant('GAME_CARDS', [\n      {\n        id: 1,\n        img: \"./assets/images/angular.png\"\n      },\n      {\n        id: 2,\n        img: \"./assets/images/angular-material.png\"\n      },\n      {\n        id: 3,\n        img: \"./assets/images/browsersync.png\"\n      },\n      {\n        id: 4,\n        img: \"./assets/images/gulp.png\"\n      },\n      {\n        id: 5,\n        img: \"./assets/images/node-sass.png\"\n      },\n      {\n        id: 6,\n        img: \"./assets/images/karma.png\"\n      },\n      {\n        id: 7,\n        img: \"./assets/images/jasmine.png\"\n      },\n      {\n        id: 8,\n        img: \"./assets/images/protractor.png\"\n      },\n      {\n        id: 9,\n        img: \"./assets/images/babel.png\"\n      },\n      {\n        id: 10,\n        img: \"./assets/images/angular-foundation.png\"\n      },\n      {\n        id: 11,\n        img: \"./assets/images/angular-strap.png\"\n      },\n      {\n        id: 12,\n        img: \"./assets/images/less.png\"\n      },\n      {\n        id: 13,\n        img: \"./assets/images/zepto.png\"\n      },\n      {\n        id: 14,\n        img: \"./assets/images/typescript.png\"\n      },\n      {\n        id: 15,\n        img: \"./assets/images/traceur.png\"\n      },\n      {\n        id: 16,\n        img: \"./assets/images/jade.png\"\n      }\n    ]);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('memorygame')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n  }\n\n})();\n\nangular.module(\"web\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/game/game.html\",\"<div class=\\\"game-container game-finished\\\"><div class=\\\"game-info-bar\\\" layout=\\\"row\\\" layout-align=\\\"space-between center\\\"><div><span>Current Level: <strong>{{GameCtrl.getCurrentLevel()}}</strong></span> <span>Total Moves: <strong>{{GameCtrl.getTotalMoves()}}</strong></span></div><div><md-button ng-click=\\\"GameCtrl.resetGame()\\\">Reset Game</md-button></div></div><mg-game-board mg-level=\\\"GameCtrl.getCurrentLevel()\\\"></mg-game-board><div class=\\\"game-finished\\\" ng-show=\\\"GameCtrl.gameFinished()\\\"><h1>CONGRATULATIONS</h1><md-button ng-click=\\\"GameCtrl.resetGame()\\\">NEW GAME</md-button></div><div class=\\\"fireworks\\\" ng-if=\\\"GameCtrl.gameFinished()\\\"></div></div>\");\n$templateCache.put(\"app/components/game-board/game-board.html\",\"<div class=\\\"game-board-container\\\"><div class=\\\"game-board-line\\\" ng-repeat=\\\"line in GameBoardCtrl.lines\\\"><mg-tile ng-repeat=\\\"tile in line track by $index\\\" tile=\\\"tile\\\"></mg-tile></div></div>\");\n$templateCache.put(\"app/components/tile/tile.html\",\"<div class=\\\"mg-tile-container\\\" ng-click=\\\"TileCtrl.onClick()\\\" ng-class=\\\"{flipped: (tile.isSelected || tile.isCorrect)}\\\"><div class=\\\"tile-back\\\"></div><div class=\\\"tile-front\\\" layout=\\\"column\\\" layout-align=\\\"center center\\\"><div class=\\\"tile-front-image\\\" style=\\\"background-image: url(\\'{{tile.img}}\\')\\\"></div></div></div>\");}]);"],"sourceRoot":"/source/"}